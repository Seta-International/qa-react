{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 5,
    "pending": 0,
    "failures": 1,
    "start": "2022-03-29T04:20:44.496Z",
    "end": "2022-03-29T04:20:52.478Z",
    "duration": 7982,
    "testsRegistered": 6,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0410bcf5-ded3-4bdc-b979-ccf91a8a874f",
      "title": "",
      "fullFile": "cypress/integration/1-getting-started/todo.spec.js",
      "file": "cypress/integration/1-getting-started/todo.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9e6ef6ce-c8a9-4e12-aae5-577be590506a",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1101,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const newButtonElm = cy.get('data-test=\"12312312\"');\ncy.get('.todo-list li').should('have.length', 2);\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {
                "message": "Error: Syntax error, unrecognized expression: data-test=\"12312312\"",
                "estack": "Error: Syntax error, unrecognized expression: data-test=\"12312312\"\n    at Function.Sizzle.error (https://example.cypress.io/__cypress/runner/cypress_runner.js:109602:8)\n    at Sizzle.tokenize (https://example.cypress.io/__cypress/runner/cypress_runner.js:110254:11)\n    at Sizzle.select (https://example.cypress.io/__cypress/runner/cypress_runner.js:110681:20)\n    at Function.Sizzle [as find] (https://example.cypress.io/__cypress/runner/cypress_runner.js:108906:9)\n    at jQuery.fn.init.find (https://example.cypress.io/__cypress/runner/cypress_runner.js:110937:11)\n    at new jQuery.fn.init (https://example.cypress.io/__cypress/runner/cypress_runner.js:111052:40)\n    at Object.query (https://example.cypress.io/__cypress/runner/cypress_runner.js:184852:10)\n    at $Cy.$$ (https://example.cypress.io/__cypress/runner/cypress_runner.js:173001:65)\n    at getElements (https://example.cypress.io/__cypress/runner/cypress_runner.js:159819:20)\n    at tryCatcher (https://example.cypress.io/__cypress/runner/cypress_runner.js:13022:23)\n    at Function.Promise.attempt.Promise.try (https://example.cypress.io/__cypress/runner/cypress_runner.js:10296:29)\n    at resolveElements (https://example.cypress.io/__cypress/runner/cypress_runner.js:159869:67)\n    at Context.get (https://example.cypress.io/__cypress/runner/cypress_runner.js:159880:14)\n    at https://example.cypress.io/__cypress/runner/cypress_runner.js:172098:15\n    at tryCatcher (https://example.cypress.io/__cypress/runner/cypress_runner.js:13022:23)",
                "diff": null
              },
              "uuid": "925c3710-78a9-4a74-9cfc-db1d03e71078",
              "parentUUID": "9e6ef6ce-c8a9-4e12-aae5-577be590506a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 1046,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat'; // Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`); // Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "fcc9b13c-115b-43b6-8915-35f604852de1",
              "parentUUID": "9e6ef6ce-c8a9-4e12-aae5-577be590506a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 692,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check(); // Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "fa721b47-a0a2-4a28-95a8-6e631782f206",
              "parentUUID": "9e6ef6ce-c8a9-4e12-aae5-577be590506a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "4d44828e-8bc4-4609-9848-7ca48ffb0758",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 1078,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click(); // After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog'); // For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "245d3967-8f07-49af-9ba2-ae1a4702b722",
                  "parentUUID": "4d44828e-8bc4-4609-9848-7ca48ffb0758",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 763,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "ca5f42c1-513a-4c59-b80b-c64c71e38845",
                  "parentUUID": "4d44828e-8bc4-4609-9848-7ca48ffb0758",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 683,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click(); // Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill'); // Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "d15de1c9-e6b7-4544-91fe-a3a1c634948c",
                  "parentUUID": "4d44828e-8bc4-4609-9848-7ca48ffb0758",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "245d3967-8f07-49af-9ba2-ae1a4702b722",
                "ca5f42c1-513a-4c59-b80b-c64c71e38845",
                "d15de1c9-e6b7-4544-91fe-a3a1c634948c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2524,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "fcc9b13c-115b-43b6-8915-35f604852de1",
            "fa721b47-a0a2-4a28-95a8-6e631782f206"
          ],
          "failures": [
            "925c3710-78a9-4a74-9cfc-db1d03e71078"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2839,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}